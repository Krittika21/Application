// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Models;

namespace WebApplication1.Migrations
{
    [DbContext(typeof(WebApplication1Context))]
    [Migration("20190712114945_Table")]
    partial class Table
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebApplication1.Models.TestDetails", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.HasKey("ID");

                    b.ToTable("TestDetails");
                });

            modelBuilder.Entity("WebApplication1.Models.TestType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TestName");

                    b.HasKey("ID");

                    b.ToTable("TestType");
                });

            modelBuilder.Entity("WebApplication1.Models.TestTypeMapping", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TestId");

                    b.Property<int>("TestTypeId");

                    b.HasKey("ID");

                    b.HasIndex("TestId")
                        .IsUnique();

                    b.HasIndex("TestTypeId");

                    b.ToTable("TestTypeMapping");
                });

            modelBuilder.Entity("WebApplication1.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("UserRole");

                    b.HasKey("ID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("WebApplication1.Models.UserTestMapping", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CTDistance");

                    b.Property<string>("FitnessRating");

                    b.Property<double>("STTime");

                    b.Property<int>("TestId");

                    b.Property<int>("UserId");

                    b.HasKey("ID");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTestMapping");
                });

            modelBuilder.Entity("WebApplication1.Models.TestTypeMapping", b =>
                {
                    b.HasOne("WebApplication1.Models.TestDetails", "TestDetail")
                        .WithOne("TestTypes")
                        .HasForeignKey("WebApplication1.Models.TestTypeMapping", "TestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication1.Models.TestType", "TestTypes")
                        .WithMany("TestTypes")
                        .HasForeignKey("TestTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.UserTestMapping", b =>
                {
                    b.HasOne("WebApplication1.Models.TestDetails", "TestDetail")
                        .WithMany("UserTests")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication1.Models.User", "Users")
                        .WithMany("UserTest")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
